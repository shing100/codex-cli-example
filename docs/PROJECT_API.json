{
  "overview": {
    "name": "sc-workflow",
    "version": "1.0.0",
    "description": "SuperClaude Workflow Generator - Implementation workflow generator for PRDs and feature specifications",
    "author": "Claude Code",
    "license": "MIT",
    "keywords": [
      "workflow",
      "prd",
      "implementation",
      "planning",
      "claude",
      "ai"
    ],
    "dependencies": {
      "commander": "^11.0.0",
      "marked": "^5.1.1",
      "yaml": "^2.3.2"
    },
    "devDependencies": {
      "eslint": "^8.45.0",
      "prettier": "^3.0.0"
    },
    "scripts": {
      "start": "node src/index.js",
      "dev": "node --watch src/index.js",
      "test": "node --test test/**/*.test.js",
      "demo": "node examples/demo.js",
      "lint": "eslint src/",
      "format": "prettier --write src/",
      "build": "echo 'No build step required for Node.js'",
      "validate": "npm test && npm run lint"
    },
    "readme": "# SuperClaude Workflow Generator (`/sc:workflow`)\n\nA comprehensive implementation workflow generator for analyzing Product Requirements Documents (PRDs) and feature specifications. Generates step-by-step implementation workflows with expert guidance, dependency mapping, and automated task orchestration.\n\n## Features\n\n- **Multi-Persona Support**: 6 specialized expert personas (Architect, Frontend, Backend, Security, DevOps, QA)\n- **Multiple Strategies**: Systematic, Agile, and MVP workflow approaches\n- **Output Formats**: Roadmap, Tasks, and Detailed implementation guides\n- **PRD Parsing**: Advanced parsing of Markdown PRDs and plain text feature descriptions\n- **Dependency Analysis**: Automatic mapping of internal, external, and technical dependencies\n- **Risk Assessment**: Comprehensive risk analysis with mitigation strategies\n- **Quality Gates**: 8-step validation framework ensuring workflow completeness\n- **MCP Integration**: Mock integration with Context7, Sequential, Magic, and Playwright servers\n- **Time Estimation**: Intelligent time and complexity estimates\n- **Parallel Work Identification**: Automatic detection of parallelizable work streams\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\n### Basic Usage\n\n```bash\n# Generate workflow from description\nnpm start generate \"Create a user authentication system with login and registration\"\n\n# Generate workflow from PRD file\nnpm start generate examples/sample-prd.md\n\n# Use specific persona\nnpm start generate \"Build React dashboard\" --persona frontend\n\n# Different output formats\nnpm start generate \"API development\" --output detailed --persona backend\n```\n\n### Advanced Options\n\n```bash\n# Full-featured workflow generation\nnpm start generate examples/sample-prd.md \\\n  --persona architect \\\n  --strategy systematic \\\n  --output detailed \\\n  --estimate \\\n  --dependencies \\\n  --risks \\\n  --parallel \\\n  --milestones \\\n  --all-mcp \\\n  --save workflow.md\n```\n\n### Interactive Mode\n\n```bash\nnpm start interactive\n```\n\n## Command Reference\n\n### Main Commands\n\n- `generate <input>` - Generate workflow from PRD file or description\n- `personas` - List available expert personas\n- `strategies` - List available workflow strategies\n- `examples` - Show usage examples\n- `interactive` - Interactive workflow generation\n\n### Options\n\n- `--persona <type>` - Force specific expert persona (architect, frontend, backend, security, devops, qa, auto)\n- `--strategy <type>` - Workflow strategy (systematic, agile, mvp)\n- `--output <format>` - Output format (roadmap, tasks, detailed)\n- `--estimate` - Include time and complexity estimates\n- `--dependencies` - Map external dependencies and integrations\n- `--risks` - Include risk assessment and mitigation strategies\n- `--parallel` - Identify parallelizable work streams\n- `--milestones` - Create milestone-based project phases\n- `--c7, --context7` - Enable Context7 for framework patterns\n- `--sequential` - Enable Sequential thinking for complex analysis\n- `--magic` - Enable Magic for UI component workflow planning\n- `--all-mcp` - Enable all MCP servers for comprehensive workflow\n- `--validate` - Run quality gates validation\n- `--save <file>` - Save workflow to file\n\n## Expert Personas\n\n### Architect\n- **Focus**: Systems architecture, long-term maintainability, scalability\n- **Specialties**: High-level design, technology selection, scalability planning\n- **MCP Preference**: Sequential (primary), Context7 (secondary)\n\n### Frontend\n- **Focus**: User experience, accessibility, performance\n- **Specialties**: UI components, responsive design, accessibility compliance\n- **MCP Preference**: Magic (primary), Playwright (secondary)\n\n### Backend\n- **Focus**: Reliability, security, data integrity\n- **Specialties**: API design, database architecture, performance optimization\n- **MCP Preference**: Context7 (primary), Sequential (secondary)\n\n### Security\n- **Focus**: Threat modeling, compliance, vulnerability assessment\n- **Specialties**: Security architecture, risk assessment, compliance validation\n- **MCP Preference**: Sequential (primary), Context7 (secondary)\n\n### DevOps\n- **Focus**: Infrastructure, automation, reliability\n- **Specialties**: CI/CD, infrastructure as code, monitoring\n- **MCP Preference**: Sequential (primary), Context7 (secondary)\n\n### QA\n- **Focus**: Quality assurance, testing, edge case detection\n- **Specialties**: Test strategy, automation, quality validation\n- **MCP Preference**: Playwright (primary), Sequential (secondary)\n\n## Workflow Strategies\n\n### Systematic (Default)\n- Comprehensive, phase-based approach\n- Detailed requirements analysis and architecture planning\n- Sequential phases with clear deliverables\n- Best for: Complex projects, enterprise systems\n\n### Agile\n- Sprint-based iterative development\n- User story breakdown and epic organization\n- Continuous delivery and feedback cycles\n- Best for: Dynamic requirements, team collaboration\n\n### MVP\n- Minimum viable product focus\n- Core feature identification and rapid validation\n- Quick market validation and feedback\n- Best for: Startups, proof-of-concepts\n\n## Output Formats\n\n### Roadmap\n- High-level phase overview\n- Timeline and milestone focus\n- Executive-friendly format\n- Checkbox task lists\n\n### Tasks\n- Epic and user story breakdown\n- Detailed task organization\n- Priority and estimation information\n- Development team focus\n\n### Detailed\n- Comprehensive implementation guide\n- Step-by-step instructions\n- Tools and deliverable specifications\n- Architecture and technical focus\n\n## Quality Gates\n\nThe system implements an 8-step quality validation framework:\n\n1. **Requirements Validation** - Completeness and traceability\n2. **Architecture Review** - Design decisions and technology choices\n3. **Security Assessment** - Security considerations and threat mitigation\n4. **Performance Validation** - Performance requirements and optimization\n5. **Testing Strategy** - Comprehensive testing approach\n6. **Documentation Review** - Documentation completeness and quality\n7. **Risk Assessment** - Risk identification and mitigation strategies\n8. **Integration Validation** - Dependency and integration planning\n\n## Examples\n\n### Frontend Dashboard\n```bash\nnpm start generate \"Create a responsive admin dashboard with React, charts, and real-time data\" \\\n  --persona frontend \\\n  --magic \\\n  --output detailed \\\n  --estimate\n```\n\n### Backend API\n```bash\nnpm start generate \"Build REST API for e-commerce with authentication, payments, and inventory\" \\\n  --persona backend \\\n  --c7 \\\n  --dependencies \\\n  --risks\n```\n\n### Full-Stack Application\n```bash\nnpm start generate examples/sample-prd.md \\\n  --persona architect \\\n  --all-mcp \\\n  --strategy systematic \\\n  --output detailed \\\n  --estimate \\\n  --dependencies \\\n  --risks \\\n  --parallel \\\n  --milestones\n```\n\n## Testing\n\n```bash\n# Run test suite\nnpm test\n\n# Run with coverage\nnpm run test:coverage\n```\n\n## Development\n\n```bash\n# Start in development mode\nnpm run dev\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format\n```\n\n## Architecture\n\nThe workflow generator is built with a modular architecture:\n\n- **Core Engine** (`src/core/`) - Main workflow generation logic\n- **Personas** (`src/personas/`) - Expert persona implementations\n- **Parsers** (`src/parsers/`) - PRD and description parsing\n- **Formatters** (`src/formatters/`) - Output format generation\n- **Integration** (`src/core/MCPIntegration.js`) - MCP server coordination\n- **Quality** (`src/core/QualityGates.js`) - Validation framework\n\n## File Structure\n\n```\nsrc/\n├── core/\n│   ├── WorkflowGenerator.js     # Main workflow engine\n│   ├── DependencyAnalyzer.js    # Dependency mapping\n│   ├── RiskAssessment.js        # Risk analysis\n│   ├── MCPIntegration.js        # MCP server integration\n│   └── QualityGates.js          # Quality validation\n├── personas/\n│   ├── PersonaFactory.js        # Persona creation\n│   ├── BasePersona.js           # Base persona class\n│   ├── ArchitectPersona.js      # Systems architect\n│   ├── FrontendPersona.js       # UI/UX specialist\n│   ├── BackendPersona.js        # API/data specialist\n│   ├── SecurityPersona.js       # Security expert\n│   ├── DevOpsPersona.js         # Infrastructure expert\n│   └── QAPersona.js             # Quality specialist\n├── parsers/\n│   └── PRDParser.js             # PRD parsing logic\n├── formatters/\n│   └── OutputFormatter.js       # Output formatting\n└── index.js                     # CLI interface\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests for new functionality\n5. Run the test suite\n6. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details.",
    "architecture": {
      "pattern": "Modular Architecture",
      "layers": [
        "CLI Interface (src/index.js)",
        "Core Engine (src/core/)",
        "Expert Personas (src/personas/)",
        "Parsers & Formatters (src/parsers/, src/formatters/)"
      ],
      "keyComponents": [
        "WorkflowGenerator - Main orchestration engine",
        "PersonaFactory - Expert persona management",
        "PRDParser - Requirements parsing",
        "OutputFormatter - Multi-format output"
      ]
    }
  },
  "api": {
    "commands/IndexCommand.js": {
      "path": "commands/IndexCommand.js",
      "exports": [
        {
          "name": "IndexCommand",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "IndexCommand",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [
        {
          "name": "walkDir",
          "async": true,
          "params": [
            "dir"
          ]
        },
        {
          "name": "walkDir",
          "async": true,
          "params": [
            "dir"
          ]
        }
      ],
      "constants": [],
      "imports": [
        {
          "source": "fs/promises",
          "statement": "import fs from 'fs/promises'"
        },
        {
          "source": "path",
          "statement": "import path from 'path'"
        },
        {
          "source": "url",
          "statement": "import { fileURLToPath } from 'url'"
        },
        {
          "source": "marked",
          "statement": "import { marked } from 'marked'"
        }
      ],
      "comments": [
        {
          "content": "Index Command - Project Documentation Generator\nCreates and maintains comprehensive project documentation, indexes, and knowledge bases",
          "location": 0
        },
        {
          "content": "Generate comprehensive project documentation\n@param {Object} options - Generation options\n@returns {Object} Generated documentation",
          "location": 596
        },
        {
          "content": "Generate project overview documentation\n@returns {Object} Overview documentation",
          "location": 2132
        },
        {
          "content": "Generate API documentation from source files\n@returns {Object} API documentation",
          "location": 2829
        },
        {
          "content": "Generate project structure documentation\n@returns {Object} Structure documentation",
          "location": 3601
        },
        {
          "content": "Generate usage examples\n@returns {Object} Examples documentation",
          "location": 4096
        },
        {
          "content": "Generate comprehensive index\n@returns {Object} Index documentation",
          "location": 5495
        },
        {
          "content": "Extract exported items from source code\n@param {string} content - File content\n@returns {Array} Exported items",
          "location": 6782
        },
        {
          "content": "Extract class definitions from source code\n@param {string} content - File content\n@returns {Array} Class definitions",
          "location": 7299
        },
        {
          "content": "Extract function definitions from source code\n@param {string} content - File content\n@returns {Array} Function definitions",
          "location": 8027
        },
        {
          "content": "Extract constants from source code\n@param {string} content - File content\n@returns {Array} Constants",
          "location": 8604
        },
        {
          "content": "Extract import statements from source code\n@param {string} content - File content\n@returns {Array} Import statements",
          "location": 9088
        },
        {
          "content": "Extract documentation comments from source code\n@param {string} content - File content\n@returns {Array} Documentation comments",
          "location": 9543
        },
        {
          "content": "Build directory tree structure\n@param {string} dir - Directory path\n@param {number} depth - Current depth\n@returns {Object} Directory tree",
          "location": 10042
        },
        {
          "content": "Format documentation for output\n@param {Object} documentation - Documentation object\n@param {string} format - Output format\n@returns {string} Formatted documentation",
          "location": 11151
        },
        {
          "content": "Format documentation as Markdown\n@param {Object} docs - Documentation object\n@returns {string} Markdown formatted documentation",
          "location": 11715
        },
        {
          "content": "Format API documentation as Markdown\n@param {Object} api - API documentation\n@returns {string} Formatted API docs",
          "location": 13926
        },
        {
          "content": "Format project structure as Markdown\n@param {Object} structure - Structure documentation\n@returns {string} Formatted structure",
          "location": 15443
        },
        {
          "content": "Format examples as Markdown\n@param {Object} examples - Examples documentation\n@returns {string} Formatted examples",
          "location": 16287
        },
        {
          "content": "Format index as Markdown\n@param {Object} index - Index documentation\n@returns {string} Formatted index",
          "location": 17080
        }
      ]
    },
    "commands/index.js": {
      "path": "commands/index.js",
      "exports": [],
      "classes": [],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Commands Module Exports\nCentral export point for all SuperClaude commands",
          "location": 0
        }
      ]
    },
    "core/DependencyAnalyzer.js": {
      "path": "core/DependencyAnalyzer.js",
      "exports": [
        {
          "name": "DependencyAnalyzer",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "DependencyAnalyzer",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Dependency Analyzer\nAnalyzes and maps dependencies within workflows",
          "location": 0
        },
        {
          "content": "Analyze dependencies in workflow\n@param {Object} workflow - Workflow object\n@returns {Object} Dependency analysis",
          "location": 420
        },
        {
          "content": "Analyze internal dependencies between tasks/phases\n@param {Object} workflow - Workflow object\n@returns {Array} Internal dependencies",
          "location": 1071
        },
        {
          "content": "Analyze external service dependencies\n@param {Object} workflow - Workflow object\n@returns {Array} External dependencies",
          "location": 2319
        },
        {
          "content": "Analyze technical dependencies (frameworks, libraries, etc.)\n@param {Object} workflow - Workflow object\n@returns {Array} Technical dependencies",
          "location": 3795
        },
        {
          "content": "Analyze team dependencies\n@param {Object} workflow - Workflow object\n@returns {Array} Team dependencies",
          "location": 5101
        },
        {
          "content": "Analyze infrastructure dependencies\n@param {Object} workflow - Workflow object\n@returns {Array} Infrastructure dependencies",
          "location": 5851
        },
        {
          "content": "Identify critical path in workflow\n@param {Object} workflow - Workflow object\n@returns {Array} Critical path",
          "location": 6977
        },
        {
          "content": "Identify potential bottlenecks\n@param {Object} workflow - Workflow object\n@returns {Array} Potential bottlenecks",
          "location": 7742
        }
      ]
    },
    "core/MCPIntegration.js": {
      "path": "core/MCPIntegration.js",
      "exports": [
        {
          "name": "MCPIntegration",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "MCPIntegration",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "MCP Integration\nMock implementation of MCP server integration for workflow enhancement",
          "location": 0
        },
        {
          "content": "Enhance analysis with MCP server insights\n@param {Object} analysis - Base analysis\n@param {Object} requirements - Requirements object\n@returns {Object} Enhanced analysis",
          "location": 486
        },
        {
          "content": "Check if Context7 should be used\n@param {Object} analysis - Analysis object\n@param {Object} requirements - Requirements object\n@returns {boolean} Whether to use Context7",
          "location": 1600
        },
        {
          "content": "Check if Sequential should be used\n@param {Object} analysis - Analysis object\n@param {Object} requirements - Requirements object\n@returns {boolean} Whether to use Sequential",
          "location": 2009
        },
        {
          "content": "Check if Magic should be used\n@param {Object} analysis - Analysis object\n@param {Object} requirements - Requirements object\n@returns {boolean} Whether to use Magic",
          "location": 2406
        },
        {
          "content": "Check if Playwright should be used\n@param {Object} analysis - Analysis object\n@param {Object} requirements - Requirements object\n@returns {boolean} Whether to use Playwright",
          "location": 2807
        },
        {
          "content": "Get Context7 insights (mock implementation)\n@param {Object} requirements - Requirements object\n@returns {Object} Context7 insights",
          "location": 3206
        },
        {
          "content": "Get Sequential insights (mock implementation)\n@param {Object} requirements - Requirements object\n@returns {Object} Sequential insights",
          "location": 3963
        },
        {
          "content": "Get Magic insights (mock implementation)\n@param {Object} requirements - Requirements object\n@returns {Object} Magic insights",
          "location": 4788
        },
        {
          "content": "Get Playwright insights (mock implementation)\n@param {Object} requirements - Requirements object\n@returns {Object} Playwright insights",
          "location": 5575
        },
        {
          "content": "Get available MCP servers\n@returns {Object} Available servers",
          "location": 6357
        },
        {
          "content": "Check server availability\n@param {string} serverName - Server name\n@returns {boolean} Whether server is available",
          "location": 6497
        }
      ]
    },
    "core/QualityGates.js": {
      "path": "core/QualityGates.js",
      "exports": [
        {
          "name": "QualityGates",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "QualityGates",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Quality Gates\nValidates workflows against quality standards and best practices",
          "location": 0
        },
        {
          "content": "Validate workflow against quality gates\n@param {Object} workflow - Workflow object\n@returns {Object} Validation results",
          "location": 594
        },
        {
          "content": "Run individual quality gate\n@param {string} gateName - Gate name\n@param {Object} workflow - Workflow object\n@returns {Object} Gate result",
          "location": 1511
        },
        {
          "content": "Validate requirements completeness\n@param {Object} workflow - Workflow object\n@returns {Object} Validation result",
          "location": 2418
        },
        {
          "content": "Review architecture decisions\n@param {Object} workflow - Workflow object\n@returns {Object} Review result",
          "location": 3759
        },
        {
          "content": "Assess security considerations\n@param {Object} workflow - Workflow object\n@returns {Object} Assessment result",
          "location": 5296
        },
        {
          "content": "Validate performance considerations\n@param {Object} workflow - Workflow object\n@returns {Object} Validation result",
          "location": 6762
        },
        {
          "content": "Validate testing strategy\n@param {Object} workflow - Workflow object\n@returns {Object} Validation result",
          "location": 8230
        },
        {
          "content": "Review documentation completeness\n@param {Object} workflow - Workflow object\n@returns {Object} Review result",
          "location": 9701
        },
        {
          "content": "Assess risk management\n@param {Object} workflow - Workflow object\n@returns {Object} Assessment result",
          "location": 11300
        },
        {
          "content": "Calculate overall quality score\n@param {Object} gates - Gate results\n@returns {number} Overall score",
          "location": 12168
        },
        {
          "content": "Generate recommendations based on gate results\n@param {Object} gates - Gate results\n@returns {Array} Recommendations",
          "location": 12575
        },
        {
          "content": "Identify blocking issues\n@param {Object} gates - Gate results\n@returns {Array} Blocking issues",
          "location": 13032
        },
        {
          "content": "Get quality gate definitions\n@returns {Array} Gate definitions",
          "location": 13499
        },
        {
          "content": "Get gate description\n@param {string} gateName - Gate name\n@returns {string} Gate description",
          "location": 13764
        }
      ]
    },
    "core/RiskAssessment.js": {
      "path": "core/RiskAssessment.js",
      "exports": [
        {
          "name": "RiskAssessment",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "RiskAssessment",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Risk Assessment\nAnalyzes and assesses risks in workflow implementation",
          "location": 0
        },
        {
          "content": "Assess risks in workflow\n@param {Object} workflow - Workflow object\n@returns {Object} Risk assessment",
          "location": 1017
        },
        {
          "content": "Assess technical risks\n@param {Object} workflow - Workflow object\n@returns {Array} Technical risks",
          "location": 1842
        },
        {
          "content": "Assess timeline risks\n@param {Object} workflow - Workflow object\n@returns {Array} Timeline risks",
          "location": 4038
        },
        {
          "content": "Assess security risks\n@param {Object} workflow - Workflow object\n@returns {Array} Security risks",
          "location": 5669
        },
        {
          "content": "Assess business risks\n@param {Object} workflow - Workflow object\n@returns {Array} Business risks",
          "location": 7342
        },
        {
          "content": "Assess resource risks\n@param {Object} workflow - Workflow object\n@returns {Array} Resource risks",
          "location": 8743
        },
        {
          "content": "Generate risk summary\n@param {Array} allRisks - All identified risks\n@returns {Object} Risk summary",
          "location": 10198
        },
        {
          "content": "Generate mitigation plan\n@param {Array} allRisks - All identified risks\n@returns {Object} Mitigation plan",
          "location": 11773
        }
      ]
    },
    "core/WorkflowGenerator.js": {
      "path": "core/WorkflowGenerator.js",
      "exports": [
        {
          "name": "WorkflowGenerator",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "WorkflowGenerator",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": [
              "options = {}"
            ]
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "../parsers/PRDParser.js",
          "statement": "import { PRDParser } from '../parsers/PRDParser.js'"
        },
        {
          "source": "../personas/PersonaFactory.js",
          "statement": "import { PersonaFactory } from '../personas/PersonaFactory.js'"
        },
        {
          "source": "../formatters/OutputFormatter.js",
          "statement": "import { OutputFormatter } from '../formatters/OutputFormatter.js'"
        },
        {
          "source": "./DependencyAnalyzer.js",
          "statement": "import { DependencyAnalyzer } from './DependencyAnalyzer.js'"
        },
        {
          "source": "./RiskAssessment.js",
          "statement": "import { RiskAssessment } from './RiskAssessment.js'"
        },
        {
          "source": "./MCPIntegration.js",
          "statement": "import { MCPIntegration } from './MCPIntegration.js'"
        },
        {
          "source": "./QualityGates.js",
          "statement": "import { QualityGates } from './QualityGates.js'"
        }
      ],
      "comments": [
        {
          "content": "Core Workflow Generator\nOrchestrates the entire workflow generation process based on PRDs and feature specifications",
          "location": 0
        },
        {
          "content": "Generate workflow from PRD file or feature description\n@param {string} input - Path to PRD file or feature description\n@param {Object} flags - Command flags and options\n@returns {Object} Generated workflow",
          "location": 1240
        },
        {
          "content": "Parse input - either PRD file or feature description\n@param {string} input - Input string\n@returns {Object} Parsed requirements",
          "location": 3141
        },
        {
          "content": "Analyze requirements for complexity, domain, and patterns\n@param {Object} requirements - Parsed requirements\n@param {Object} options - Generation options\n@returns {Object} Analysis results",
          "location": 3572
        },
        {
          "content": "Select appropriate persona based on analysis\n@param {Object} analysis - Requirements analysis\n@param {Object} options - Generation options\n@returns {Object} Selected persona instance",
          "location": 4453
        },
        {
          "content": "Auto-detect persona based on analysis\n@param {Object} analysis - Requirements analysis\n@returns {string} Persona type",
          "location": 4980
        },
        {
          "content": "Enhance workflow with additional analysis\n@param {Object} workflow - Base workflow\n@param {Object} options - Generation options\n@returns {Object} Enhanced workflow",
          "location": 6072
        },
        {
          "content": "Calculate complexity score (0-1)\n@param {Object} requirements - Requirements object\n@returns {number} Complexity score",
          "location": 7063
        },
        {
          "content": "Identify domains from requirements\n@param {Object} requirements - Requirements object\n@returns {Array} List of domains",
          "location": 8073
        },
        {
          "content": "Identify implementation patterns\n@param {Object} requirements - Requirements object\n@returns {Array} List of patterns",
          "location": 8987
        },
        {
          "content": "Assess initial risk level\n@param {Object} requirements - Requirements object\n@returns {string} Risk level (low, medium, high)",
          "location": 9689
        },
        {
          "content": "Estimate project duration in weeks\n@param {Object} requirements - Requirements object\n@returns {number} Duration in weeks",
          "location": 10304
        },
        {
          "content": "Add time estimates to workflow tasks\n@param {Object} workflow - Workflow object\n@returns {Object} Workflow with time estimates",
          "location": 10942
        },
        {
          "content": "Estimate time for a phase\n@param {Object} phase - Phase object\n@returns {string} Time estimate",
          "location": 11510
        },
        {
          "content": "Estimate time for a task\n@param {Object} task - Task object\n@returns {number} Hours estimate",
          "location": 11959
        },
        {
          "content": "Identify parallel work streams\n@param {Object} workflow - Workflow object\n@returns {Array} Parallel work streams",
          "location": 12653
        },
        {
          "content": "Create project milestones\n@param {Object} workflow - Workflow object\n@returns {Array} Project milestones",
          "location": 13306
        }
      ]
    },
    "formatters/OutputFormatter.js": {
      "path": "formatters/OutputFormatter.js",
      "exports": [
        {
          "name": "OutputFormatter",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "OutputFormatter",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Output Formatter\nFormats workflow data into different output formats (roadmap, tasks, detailed)",
          "location": 0
        },
        {
          "content": "Format workflow into specified output format\n@param {Object} workflow - Workflow object\n@param {string} format - Output format (roadmap, tasks, detailed)\n@returns {string} Formatted output",
          "location": 333
        },
        {
          "content": "Format workflow as roadmap\n@param {Object} workflow - Workflow object\n@returns {string} Roadmap format",
          "location": 776
        },
        {
          "content": "Format workflow as tasks\n@param {Object} workflow - Workflow object\n@returns {string} Tasks format",
          "location": 1806
        },
        {
          "content": "Format workflow as detailed implementation guide\n@param {Object} workflow - Workflow object\n@returns {string} Detailed format",
          "location": 3077
        },
        {
          "content": "Generate common header for all formats\n@param {Object} workflow - Workflow object\n@param {string} subtitle - Format-specific subtitle\n@returns {string} Header content",
          "location": 6464
        },
        {
          "content": "Group tasks by type\n@param {Array} tasks - Array of tasks\n@returns {Object} Tasks grouped by type",
          "location": 7774
        },
        {
          "content": "Format metadata section\n@param {Object} metadata - Metadata object\n@returns {string} Formatted metadata",
          "location": 8156
        },
        {
          "content": "Format MCP recommendations\n@param {Object} recommendations - MCP recommendations\n@returns {string} Formatted recommendations",
          "location": 8591
        },
        {
          "content": "Format quality gates\n@param {Array} qualityGates - Quality gates array\n@returns {string} Formatted quality gates",
          "location": 9319
        },
        {
          "content": "Format best practices\n@param {Array} bestPractices - Best practices array\n@returns {string} Formatted best practices",
          "location": 9656
        },
        {
          "content": "Format dependencies\n@param {Array} dependencies - Dependencies array\n@returns {string} Formatted dependencies",
          "location": 10005
        },
        {
          "content": "Format risks\n@param {Array} risks - Risks array\n@returns {string} Formatted risks",
          "location": 10616
        },
        {
          "content": "Format acceptance criteria\n@param {Array} criteria - Acceptance criteria array\n@returns {string} Formatted acceptance criteria",
          "location": 11128
        },
        {
          "content": "Format complexity score\n@param {number} complexity - Complexity score (0-1)\n@returns {string} Formatted complexity",
          "location": 11518
        },
        {
          "content": "Capitalize first letter of string\n@param {string} str - Input string\n@returns {string} Capitalized string",
          "location": 11848
        },
        {
          "content": "Get available output formats\n@returns {Array} Available formats",
          "location": 12091
        },
        {
          "content": "Validate output format\n@param {string} format - Format to validate\n@returns {boolean} Whether format is valid",
          "location": 12249
        }
      ]
    },
    "index.js": {
      "path": "index.js",
      "exports": [],
      "classes": [],
      "functions": [
        {
          "name": "validateInput",
          "async": true,
          "params": [
            "input"
          ]
        },
        {
          "name": "saveWorkflow",
          "async": true,
          "params": [
            "workflow",
            "filename"
          ]
        },
        {
          "name": "formatComplexity",
          "async": false,
          "params": [
            "complexity"
          ]
        },
        {
          "name": "prompt",
          "async": false,
          "params": [
            "question"
          ]
        },
        {
          "name": "confirmPrompt",
          "async": false,
          "params": [
            "question"
          ]
        }
      ],
      "constants": [],
      "imports": [
        {
          "source": "commander",
          "statement": "import { Command } from 'commander'"
        },
        {
          "source": "fs/promises",
          "statement": "import { readFile, access } from 'fs/promises'"
        },
        {
          "source": "fs",
          "statement": "import { constants } from 'fs'"
        },
        {
          "source": "./core/WorkflowGenerator.js",
          "statement": "import { WorkflowGenerator } from './core/WorkflowGenerator.js'"
        },
        {
          "source": "./commands/IndexCommand.js",
          "statement": "import { IndexCommand } from './commands/IndexCommand.js'"
        }
      ],
      "comments": [
        {
          "content": "/sc:workflow CLI - Implementation Workflow Generator\nMain entry point for the SuperClaude workflow generation command",
          "location": 21
        }
      ]
    },
    "parsers/PRDParser.js": {
      "path": "parsers/PRDParser.js",
      "exports": [
        {
          "name": "PRDParser",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "PRDParser",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "fs/promises",
          "statement": "import { readFile } from 'fs/promises'"
        },
        {
          "source": "marked",
          "statement": "import { marked } from 'marked'"
        }
      ],
      "comments": [
        {
          "content": "PRD Parser\nParses Product Requirements Documents and feature descriptions",
          "location": 0
        },
        {
          "content": "Parse PRD from file\n@param {string} filePath - Path to PRD file\n@returns {Object} Parsed PRD structure",
          "location": 725
        },
        {
          "content": "Parse feature description\n@param {string} description - Feature description text\n@returns {Object} Parsed requirements structure",
          "location": 1365
        },
        {
          "content": "Detect file type from extension\n@param {string} filePath - File path\n@returns {string} File type",
          "location": 2305
        },
        {
          "content": "Parse markdown content\n@param {string} content - Markdown content\n@returns {Object} Parsed structure",
          "location": 2711
        },
        {
          "content": "Parse plain text content\n@param {string} content - Text content\n@returns {Object} Parsed structure",
          "location": 3919
        },
        {
          "content": "Extract sections from markdown tokens\n@param {Array} tokens - Markdown tokens\n@returns {Object} Sections object",
          "location": 4116
        },
        {
          "content": "Identify section type from heading text\n@param {string} headingText - Heading text\n@returns {string} Section type",
          "location": 4938
        },
        {
          "content": "Find document title\n@param {Array} tokens - Markdown tokens\n@returns {string} Document title",
          "location": 5338
        },
        {
          "content": "Extract title from description\n@param {string} description - Description text\n@returns {string} Extracted title",
          "location": 5645
        },
        {
          "content": "Parse features list\n@param {string} content - Features section content\n@returns {Array} List of features",
          "location": 6249
        },
        {
          "content": "Parse user stories\n@param {string} content - User stories section content\n@returns {Array} List of user stories",
          "location": 6996
        },
        {
          "content": "Parse acceptance criteria\n@param {string} content - Acceptance criteria section content\n@returns {Array} List of acceptance criteria",
          "location": 8061
        },
        {
          "content": "Extract features from text\n@param {string} text - Input text\n@returns {Array} List of features",
          "location": 8850
        },
        {
          "content": "Extract components from text\n@param {string} text - Input text\n@returns {Array} List of components",
          "location": 9654
        },
        {
          "content": "Extract integrations from text\n@param {string} text - Input text\n@returns {Array} List of integrations",
          "location": 10431
        },
        {
          "content": "Extract user roles from text\n@param {string} text - Input text\n@returns {Array} List of user roles",
          "location": 11212
        },
        {
          "content": "Extract pages from text\n@param {string} text - Input text\n@returns {Array} List of pages",
          "location": 11899
        },
        {
          "content": "Analyze complexity from text\n@param {string} text - Input text\n@returns {number} Complexity score (0-1)",
          "location": 12547
        },
        {
          "content": "Extract domains from text\n@param {string} text - Input text\n@returns {Array} List of domains",
          "location": 13858
        },
        {
          "content": "Extract patterns from text\n@param {string} text - Input text\n@returns {Array} List of patterns",
          "location": 14961
        },
        {
          "content": "Extract requirements from text\n@param {string} text - Input text\n@returns {Object} Requirements object",
          "location": 16107
        },
        {
          "content": "Extract acceptance criteria from text\n@param {string} text - Input text\n@returns {Array} List of acceptance criteria",
          "location": 17046
        },
        {
          "content": "Extract timeline information\n@param {string} text - Input text\n@returns {Object} Timeline object",
          "location": 17929
        },
        {
          "content": "Extract resource information\n@param {string} text - Input text\n@returns {Object} Resources object",
          "location": 18744
        },
        {
          "content": "Extract priority from text\n@param {string} text - Input text\n@returns {string} Priority level",
          "location": 19862
        },
        {
          "content": "Extract complexity from text\n@param {string} text - Input text\n@returns {string} Complexity level",
          "location": 20272
        },
        {
          "content": "Check if criterion is testable\n@param {string} criterion - Acceptance criterion\n@returns {boolean} Whether criterion is testable",
          "location": 20722
        },
        {
          "content": "Parse technical requirements\n@param {string} content - Technical requirements content\n@returns {Object} Technical requirements object",
          "location": 21313
        },
        {
          "content": "Extract performance requirements\n@param {string} content - Content to analyze\n@returns {Object} Performance requirements",
          "location": 22219
        },
        {
          "content": "Extract security requirements\n@param {string} content - Content to analyze\n@returns {Object} Security requirements",
          "location": 23101
        },
        {
          "content": "Extract scalability requirements\n@param {string} content - Content to analyze\n@returns {Object} Scalability requirements",
          "location": 23738
        },
        {
          "content": "Parse constraints\n@param {string} content - Constraints content\n@returns {Array} List of constraints",
          "location": 24499
        },
        {
          "content": "Categorize constraint type\n@param {string} constraint - Constraint description\n@returns {string} Constraint type",
          "location": 25213
        }
      ]
    },
    "personas/ArchitectPersona.js": {
      "path": "personas/ArchitectPersona.js",
      "exports": [
        {
          "name": "ArchitectPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "ArchitectPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "Architect Persona\nSystems architecture specialist, long-term thinking focus, scalability expert",
          "location": 0
        },
        {
          "content": "Generate architect-specific systematic workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 837
        },
        {
          "content": "Create system analysis phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 1612
        },
        {
          "content": "Create architectural design phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 3317
        },
        {
          "content": "Create technology selection phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 5003
        },
        {
          "content": "Create scalability planning phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 6462
        },
        {
          "content": "Create implementation roadmap phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 8293
        },
        {
          "content": "Create quality assurance phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 9705
        },
        {
          "content": "Create evolution strategy phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 11124
        },
        {
          "content": "Check if scalability planning is needed\n@param {Object} requirements - Requirements object\n@returns {boolean} Whether scalability planning is needed",
          "location": 12571
        },
        {
          "content": "Get architect-specific best practices\n@returns {Array} Best practices",
          "location": 13161
        },
        {
          "content": "Get architect-specific quality gates\n@returns {Array} Quality gates",
          "location": 13901
        },
        {
          "content": "Enhance workflow with architect-specific improvements\n@param {Object} workflow - Base workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Object} Enhanced workflow",
          "location": 14483
        }
      ]
    },
    "personas/BackendPersona.js": {
      "path": "personas/BackendPersona.js",
      "exports": [
        {
          "name": "BackendPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "BackendPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "Backend Persona\nReliability engineer, API specialist, data integrity focus",
          "location": 0
        },
        {
          "content": "Generate backend-specific systematic workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 982
        },
        {
          "content": "Create API design phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 1794
        },
        {
          "content": "Create database design phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 3584
        },
        {
          "content": "Create security implementation phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 5339
        },
        {
          "content": "Create service implementation phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 7315
        },
        {
          "content": "Create integration phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 9267
        },
        {
          "content": "Create performance optimization phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 10639
        },
        {
          "content": "Create monitoring phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 12397
        },
        {
          "content": "Create deployment phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 13973
        },
        {
          "content": "Extract services from requirements\n@param {Object} requirements - Requirements object\n@returns {Array} List of services",
          "location": 15495
        },
        {
          "content": "Estimate hours for service implementation\n@param {string} service - Service name\n@returns {number} Estimated hours",
          "location": 16569
        },
        {
          "content": "Get backend-specific best practices\n@returns {Array} Best practices",
          "location": 17111
        },
        {
          "content": "Get backend-specific quality gates\n@returns {Array} Quality gates",
          "location": 17894
        },
        {
          "content": "Enhance workflow with backend-specific improvements\n@param {Object} workflow - Base workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Object} Enhanced workflow",
          "location": 18455
        }
      ]
    },
    "personas/BasePersona.js": {
      "path": "personas/BasePersona.js",
      "exports": [
        {
          "name": "BasePersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "BasePersona",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": [
              "type",
              "config = {}"
            ]
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [],
      "comments": [
        {
          "content": "Base Persona\nAbstract base class for all persona implementations",
          "location": 0
        },
        {
          "content": "Generate workflow based on requirements\n@param {Object} requirements - Parsed requirements\n@param {Object} options - Generation options\n@returns {Object} Generated workflow",
          "location": 403
        },
        {
          "content": "Generate systematic workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 1664
        },
        {
          "content": "Generate agile workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 2371
        },
        {
          "content": "Generate MVP workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 3108
        },
        {
          "content": "Create requirements analysis phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 4591
        },
        {
          "content": "Create architecture planning phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 5645
        },
        {
          "content": "Create dependency mapping phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 6692
        },
        {
          "content": "Create implementation phases\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 7605
        },
        {
          "content": "Create testing strategy phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 9472
        },
        {
          "content": "Create deployment planning phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 10460
        },
        {
          "content": "Enhance workflow with persona-specific improvements\n@param {Object} workflow - Base workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Object} Enhanced workflow",
          "location": 11509
        },
        {
          "content": "Get MCP server recommendations\n@returns {Object} MCP recommendations",
          "location": 12066
        },
        {
          "content": "Get quality gates for this persona\n@returns {Array} Quality gates",
          "location": 12471
        },
        {
          "content": "Get best practices for this persona\n@returns {Array} Best practices",
          "location": 12789
        },
        {
          "content": "Convert requirements to epics\n@param {Object} requirements - Requirements object\n@returns {Array} List of epics",
          "location": 13129
        },
        {
          "content": "Create user stories from feature\n@param {Object} feature - Feature object\n@returns {Array} User stories",
          "location": 13580
        },
        {
          "content": "Organize features into sprints\n@param {Array} epics - List of epics\n@returns {Array} Sprint organization",
          "location": 14027
        },
        {
          "content": "Identify core features for MVP\n@param {Object} requirements - Requirements object\n@returns {Array} Core features",
          "location": 14901
        },
        {
          "content": "Identify dependencies from requirements\n@param {Object} requirements - Requirements object\n@returns {Array} List of dependencies",
          "location": 15296
        },
        {
          "content": "Estimate project duration\n@param {Object} requirements - Requirements object\n@returns {string} Duration estimate",
          "location": 15961
        },
        {
          "content": "Assess risk level\n@param {Object} requirements - Requirements object\n@returns {string} Risk level",
          "location": 16590
        },
        {
          "content": "Estimate story points for feature\n@param {Object} feature - Feature object\n@returns {number} Story points",
          "location": 17147
        }
      ]
    },
    "personas/DevOpsPersona.js": {
      "path": "personas/DevOpsPersona.js",
      "exports": [
        {
          "name": "DevOpsPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "DevOpsPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "DevOps Persona\nInfrastructure specialist, deployment expert, reliability engineer",
          "location": 0
        }
      ]
    },
    "personas/FrontendPersona.js": {
      "path": "personas/FrontendPersona.js",
      "exports": [
        {
          "name": "FrontendPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "FrontendPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "Frontend Persona\nUX specialist, accessibility advocate, performance-conscious developer",
          "location": 0
        },
        {
          "content": "Generate frontend-specific systematic workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Array} Workflow phases",
          "location": 1012
        },
        {
          "content": "Create UX analysis phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 1796
        },
        {
          "content": "Create design system phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 3291
        },
        {
          "content": "Create component architecture phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 4750
        },
        {
          "content": "Create accessibility testing phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 6486
        },
        {
          "content": "Create performance optimization phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 8087
        },
        {
          "content": "Create cross-browser testing phase\n@param {Object} requirements - Requirements object\n@returns {Object} Phase object",
          "location": 10096
        },
        {
          "content": "Extract UI components from requirements\n@param {Object} requirements - Requirements object\n@returns {Array} List of UI components",
          "location": 11398
        },
        {
          "content": "Estimate hours for component implementation\n@param {string} component - Component name\n@returns {number} Estimated hours",
          "location": 12428
        },
        {
          "content": "Get frontend-specific best practices\n@returns {Array} Best practices",
          "location": 12994
        },
        {
          "content": "Get frontend-specific quality gates\n@returns {Array} Quality gates",
          "location": 13680
        },
        {
          "content": "Enhance workflow with frontend-specific improvements\n@param {Object} workflow - Base workflow\n@param {Object} requirements - Requirements object\n@param {Object} options - Generation options\n@returns {Object} Enhanced workflow",
          "location": 14174
        }
      ]
    },
    "personas/PersonaFactory.js": {
      "path": "personas/PersonaFactory.js",
      "exports": [
        {
          "name": "PersonaFactory",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "PersonaFactory",
          "extends": null,
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./ArchitectPersona.js",
          "statement": "import { ArchitectPersona } from './ArchitectPersona.js'"
        },
        {
          "source": "./FrontendPersona.js",
          "statement": "import { FrontendPersona } from './FrontendPersona.js'"
        },
        {
          "source": "./BackendPersona.js",
          "statement": "import { BackendPersona } from './BackendPersona.js'"
        },
        {
          "source": "./SecurityPersona.js",
          "statement": "import { SecurityPersona } from './SecurityPersona.js'"
        },
        {
          "source": "./DevOpsPersona.js",
          "statement": "import { DevOpsPersona } from './DevOpsPersona.js'"
        },
        {
          "source": "./QAPersona.js",
          "statement": "import { QAPersona } from './QAPersona.js'"
        }
      ],
      "comments": [
        {
          "content": "Persona Factory\nCreates specialized persona instances for workflow generation",
          "location": 0
        },
        {
          "content": "Create persona instance\n@param {string} type - Persona type\n@returns {Object} Persona instance",
          "location": 712
        },
        {
          "content": "Get available persona types\n@returns {Array} List of available persona types",
          "location": 1048
        },
        {
          "content": "Check if persona type exists\n@param {string} type - Persona type\n@returns {boolean} Whether persona exists",
          "location": 1221
        }
      ]
    },
    "personas/QAPersona.js": {
      "path": "personas/QAPersona.js",
      "exports": [
        {
          "name": "QAPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "QAPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "QA Persona\nQuality advocate, testing specialist, edge case detective",
          "location": 0
        }
      ]
    },
    "personas/SecurityPersona.js": {
      "path": "personas/SecurityPersona.js",
      "exports": [
        {
          "name": "SecurityPersona",
          "type": "class"
        }
      ],
      "classes": [
        {
          "name": "SecurityPersona",
          "extends": "BasePersona",
          "methods": [],
          "constructor": {
            "params": []
          }
        }
      ],
      "functions": [],
      "constants": [],
      "imports": [
        {
          "source": "./BasePersona.js",
          "statement": "import { BasePersona } from './BasePersona.js'"
        }
      ],
      "comments": [
        {
          "content": "Security Persona\nThreat modeler, compliance expert, vulnerability specialist",
          "location": 0
        }
      ]
    }
  },
  "structure": {
    "tree": {
      "name": "codex-example",
      "type": "directory",
      "children": [
        {
          "name": "CLAUDE.md",
          "type": "file",
          "extension": ".md"
        },
        {
          "name": "README.md",
          "type": "file",
          "extension": ".md"
        },
        {
          "name": "docs",
          "type": "directory",
          "children": [
            {
              "name": "PROJECT_DOCUMENTATION.md",
              "type": "file",
              "extension": ".md"
            }
          ]
        },
        {
          "name": "examples",
          "type": "directory",
          "children": [
            {
              "name": "demo.js",
              "type": "file",
              "extension": ".js"
            },
            {
              "name": "sample-prd.md",
              "type": "file",
              "extension": ".md"
            }
          ]
        },
        {
          "name": "package-lock.json",
          "type": "file",
          "extension": ".json"
        },
        {
          "name": "package.json",
          "type": "file",
          "extension": ".json"
        },
        {
          "name": "src",
          "type": "directory",
          "children": [
            {
              "name": "commands",
              "type": "directory",
              "children": [
                {
                  "name": "IndexCommand.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "index.js",
                  "type": "file",
                  "extension": ".js"
                }
              ]
            },
            {
              "name": "core",
              "type": "directory",
              "children": [
                {
                  "name": "DependencyAnalyzer.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "MCPIntegration.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "QualityGates.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "RiskAssessment.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "WorkflowGenerator.js",
                  "type": "file",
                  "extension": ".js"
                }
              ]
            },
            {
              "name": "formatters",
              "type": "directory",
              "children": [
                {
                  "name": "OutputFormatter.js",
                  "type": "file",
                  "extension": ".js"
                }
              ]
            },
            {
              "name": "index.js",
              "type": "file",
              "extension": ".js"
            },
            {
              "name": "parsers",
              "type": "directory",
              "children": [
                {
                  "name": "PRDParser.js",
                  "type": "file",
                  "extension": ".js"
                }
              ]
            },
            {
              "name": "personas",
              "type": "directory",
              "children": [
                {
                  "name": "ArchitectPersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "BackendPersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "BasePersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "DevOpsPersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "FrontendPersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "PersonaFactory.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "QAPersona.js",
                  "type": "file",
                  "extension": ".js"
                },
                {
                  "name": "SecurityPersona.js",
                  "type": "file",
                  "extension": ".js"
                }
              ]
            },
            {
              "name": "utils",
              "type": "directory",
              "children": []
            }
          ]
        },
        {
          "name": "test",
          "type": "directory",
          "children": [
            {
              "name": "workflow-generator.test.js",
              "type": "file",
              "extension": ".js"
            }
          ]
        }
      ]
    },
    "summary": {
      "totalFiles": 18,
      "directories": 6,
      "fileTypes": {
        ".js": 18
      },
      "componentCounts": {
        "personas": 8,
        "core": 5,
        "parsers": 1,
        "formatters": 1,
        "total": 18
      }
    }
  },
  "examples": {
    "basic": [
      {
        "title": "Generate Basic Workflow",
        "command": "npm start generate \"Create user authentication system\"",
        "description": "Generate a workflow from a simple feature description"
      },
      {
        "title": "Generate from PRD File",
        "command": "npm start generate examples/sample-prd.md",
        "description": "Generate workflow from a Product Requirements Document"
      }
    ],
    "advanced": [
      {
        "title": "Full-Featured Workflow",
        "command": "npm start generate examples/sample-prd.md --persona architect --strategy systematic --output detailed --estimate --dependencies --risks --parallel --milestones --all-mcp --save workflow.md",
        "description": "Generate comprehensive workflow with all features enabled"
      },
      {
        "title": "Frontend-Specific Workflow",
        "command": "npm start generate \"Build React dashboard with charts\" --persona frontend --magic --output detailed --estimate",
        "description": "Generate frontend-focused workflow with UI components"
      }
    ],
    "personas": {
      "architect": "npm start generate \"Enterprise system design\" --persona architect --strategy systematic",
      "frontend": "npm start generate \"React dashboard\" --persona frontend --magic --output detailed",
      "backend": "npm start generate \"REST API\" --persona backend --c7 --dependencies",
      "security": "npm start generate \"Authentication system\" --persona security --validate --risks",
      "devops": "npm start generate \"CI/CD pipeline\" --persona devops --sequential",
      "qa": "npm start generate \"Testing strategy\" --persona qa --play"
    },
    "strategies": {
      "systematic": "npm start generate input.md --strategy systematic --output detailed",
      "agile": "npm start generate input.md --strategy agile --milestones",
      "mvp": "npm start generate input.md --strategy mvp --estimate"
    }
  },
  "index": {
    "quickStart": {
      "installation": [
        "npm install"
      ],
      "basicUsage": [
        "npm start generate \"your feature description\""
      ],
      "helpCommand": [
        "npm start --help"
      ]
    },
    "commands": {
      "generate": "Generate workflow from PRD or description",
      "personas": "List available expert personas",
      "strategies": "List available workflow strategies",
      "examples": "Show usage examples",
      "interactive": "Interactive workflow generation"
    },
    "personas": {
      "architect": "Systems architecture and design",
      "frontend": "UI/UX and user experience",
      "backend": "APIs and data architecture",
      "security": "Security and compliance",
      "devops": "Infrastructure and deployment",
      "qa": "Quality assurance and testing"
    },
    "strategies": {
      "systematic": "Comprehensive phase-based approach",
      "agile": "Sprint-based iterative development",
      "mvp": "Minimum viable product focus"
    },
    "outputs": {
      "roadmap": "High-level timeline and milestones",
      "tasks": "Detailed task breakdown",
      "detailed": "Complete implementation guide"
    }
  }
}